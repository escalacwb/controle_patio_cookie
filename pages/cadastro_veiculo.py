import streamlit as st
from database import get_connection, release_connection
import psycopg2
import pandas as pd

def app():
    st.title("‚ûï Cadastro de Ve√≠culos e Servi√ßos")
    st.markdown("---")

    # --- Formul√°rio de Cadastro de Ve√≠culo ---
    st.header("1. Dados do Ve√≠culo")
    with st.form("form_veiculo", clear_on_submit=True):
        col1, col2 = st.columns(2)
        with col1:
            placa = st.text_input("Placa do Ve√≠culo (ex: ABC1234)", max_chars=7).upper()
            empresa = st.text_input("Empresa/Cliente", help="Nome da empresa ou do cliente propriet√°rio.")
        with col2:
            modelo = st.text_input("Modelo do Ve√≠culo")
            # A quilometragem aqui √© a do ve√≠culo, n√£o necessariamente a do servi√ßo.
            # √â bom ter este registro inicial.
            quilometragem_veiculo = st.number_input("Quilometragem Atual do Ve√≠culo (km)", min_value=0, step=100)

        submitted_veiculo = st.form_submit_button("Cadastrar Novo Ve√≠culo")

        if submitted_veiculo:
            if not all([placa, empresa, modelo]):
                st.error("‚ùå Por favor, preencha todos os campos do ve√≠culo (Placa, Empresa, Modelo).")
            else:
                conn = get_connection()
                if not conn:
                    st.error("Falha ao conectar ao banco de dados.")
                    return
                
                try:
                    with conn.cursor() as cursor:
                        # Inserir ve√≠culo e retornar o ID gerado.
                        # Usando NOW() do pr√≥prio PostgreSQL para a data de entrada.
                        query = """
                            INSERT INTO veiculos (placa, empresa, modelo, quilometragem, data_entrada) 
                            VALUES (%s, %s, %s, %s, NOW()) 
                            RETURNING id;
                        """
                        cursor.execute(query, (placa, empresa, modelo, quilometragem_veiculo))
                        veiculo_id = cursor.fetchone()[0]
                        conn.commit()

                        # Salva na sess√£o para uso posterior no formul√°rio de servi√ßo
                        st.session_state['last_registered_veiculo_id'] = veiculo_id
                        st.session_state['last_registered_placa'] = placa
                        
                        st.success(f"‚úÖ Ve√≠culo '{placa}' cadastrado com sucesso! ID: {veiculo_id}")
                        st.info("üëá Agora, adicione os servi√ßos para este ve√≠culo no formul√°rio abaixo.")

                except psycopg2.IntegrityError as e:
                    conn.rollback()
                    # Verifica se o erro foi de placa duplicada
                    if "veiculos_placa_key" in str(e) or "unique_placa" in str(e):
                        st.error(f"‚ùå Erro: A placa '{placa}' j√° est√° cadastrada no sistema.")
                    else:
                        st.error(f"‚ùå Erro de integridade no banco de dados: {e}")
                except Exception as e:
                    conn.rollback()
                    st.error(f"‚ùå Erro inesperado ao cadastrar ve√≠culo: {e}")
                finally:
                    release_connection(conn)

    st.markdown("---")

    # --- Formul√°rio para Adicionar Servi√ßos ---
    st.header("2. Adicionar Servi√ßos a um Ve√≠culo")

    conn = get_connection()
    if not conn:
        st.error("Falha ao conectar ao banco de dados para listar ve√≠culos.")
        return

    try:
        # Carrega a lista de ve√≠culos para o selectbox
        df_veiculos = pd.read_sql("SELECT id, placa, empresa FROM veiculos ORDER BY placa;", conn)
        # Cria uma coluna formatada para exibi√ß√£o no selectbox
        df_veiculos['display'] = df_veiculos.apply(lambda row: f"{row['placa']} - {row['empresa']} (ID: {row['id']})", axis=1)
        
        veiculos_options = ["Selecione um ve√≠culo..."] + df_veiculos['display'].tolist()
        
        # Tenta pr√©-selecionar o √∫ltimo ve√≠culo cadastrado
        default_index = 0
        if 'last_registered_placa' in st.session_state:
            last_display_option = f"{st.session_state['last_registered_placa']} - {df_veiculos[df_veiculos['id'] == st.session_state['last_registered_veiculo_id']].iloc[0]['empresa']} (ID: {st.session_state['last_registered_veiculo_id']})"
            if last_display_option in veiculos_options:
                default_index = veiculos_options.index(last_display_option)

        selected_veiculo_display = st.selectbox(
            "Selecione o ve√≠culo:",
            veiculos_options,
            index=default_index
        )
    except Exception as e:
        st.error(f"Erro ao carregar lista de ve√≠culos: {e}")
        selected_veiculo_display = None
    finally:
        release_connection(conn)


    # Extrai o ID do ve√≠culo selecionado
    selected_veiculo_id = None
    if selected_veiculo_display and "ID:" in selected_veiculo_display:
        try:
            selected_veiculo_id = int(selected_veiculo_display.split("ID: ")[1].strip(")"))
        except (ValueError, IndexError):
            pass

    if selected_veiculo_id:
        st.info(f"Ve√≠culo selecionado para adicionar servi√ßos: **{selected_veiculo_display.split(' (ID:')[0]}**")

        with st.form("form_servico", clear_on_submit=True):
            area_servico = st.selectbox(
                "√Årea do Servi√ßo",
                ["Borracharia", "Alinhamento", "Manuten√ß√£o Mec√¢nica"]
            )

            # Carrega os servi√ßos dispon√≠veis para a √°rea selecionada
            conn = get_connection()
            if not conn:
                st.error("Falha ao conectar para carregar servi√ßos.")
                return
            
            try:
                if area_servico == "Borracharia":
                    df_servicos = pd.read_sql("SELECT nome FROM servicos_borracharia ORDER BY nome;", conn)
                elif area_servico == "Alinhamento":
                    df_servicos = pd.read_sql("SELECT nome FROM servicos_alinhamento ORDER BY nome;", conn)
                else: # Manuten√ß√£o Mec√¢nica
                    df_servicos = pd.read_sql("SELECT nome FROM servicos_manutencao ORDER BY nome;", conn)
                
                servicos_disponiveis = [""] + df_servicos['nome'].tolist()
            except Exception as e:
                st.error(f"Erro ao carregar servi√ßos dispon√≠veis: {e}")
                servicos_disponiveis = [""]
            finally:
                release_connection(conn)

            tipo_servico = st.selectbox("Tipo de Servi√ßo", servicos_disponiveis)
            quantidade = st.number_input("Quantidade", min_value=1, value=1, step=1)
            descricao = st.text_area("Descri√ß√£o/Observa√ß√µes do Servi√ßo", help="Detalhes espec√≠ficos sobre o servi√ßo a ser realizado.")

            submitted_servico = st.form_submit_button("Adicionar Servi√ßo")

            if submitted_servico:
                if not tipo_servico:
                    st.warning("‚ö†Ô∏è Por favor, selecione um tipo de servi√ßo.")
                else:
                    table_map = {
                        "Borracharia": "servicos_solicitados_borracharia",
                        "Alinhamento": "servicos_solicitados_alinhamento",
                        "Manuten√ß√£o Mec√¢nica": "servicos_solicitados_manutencao"
                    }
                    table_name = table_map.get(area_servico)
                    
                    conn = get_connection()
                    if not conn:
                        st.error("Falha ao conectar para salvar o servi√ßo.")
                        return

                    try:
                        with conn.cursor() as cursor:
                            # Query parametrizada para inserir o servi√ßo solicitado.
                            # Usando NOW() para data_solicitacao e data_atualizacao.
                            query = f"""
                                INSERT INTO {table_name} 
                                (veiculo_id, tipo, quantidade, descricao, observacao, status, data_solicitacao, data_atualizacao)
                                VALUES (%s, %s, %s, %s, %s, 'pendente', NOW(), NOW());
                            """
                            cursor.execute(query, (selected_veiculo_id, tipo_servico, quantidade, descricao, descricao))
                            conn.commit()
                            st.success(f"‚úÖ Servi√ßo '{tipo_servico}' adicionado com sucesso para o ve√≠culo selecionado!")
                    except Exception as e:
                        conn.rollback()
                        st.error(f"‚ùå Erro ao adicionar servi√ßo: {e}")
                    finally:
                        release_connection(conn)
    else:
        st.info("‚òùÔ∏è Cadastre um novo ve√≠culo ou selecione um existente na lista para poder adicionar servi√ßos.")